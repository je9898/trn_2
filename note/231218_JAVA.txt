- 객체지향
	-> object
	-> 클래스, 객체, 인스턴스, 상속, 인터페이스, 다향성, 추상화...

- 절차지향
	-> 문법규칙 우선  
	-> 순서대로 작동
	-> 클래스 내의 코딩위치에 따라 실행
	
	
	public privat protected defult
	-> 접근 제한자
	-> public : 어디서든
	-> default : 같은 패키지
	-> privat : 내꺼에서만
	-> protected : 같은 패키지, 자식 클래스

static 
	-> 메모리에 올려둠 (사용 안해도 메모리 잡아먹어)
	-> static 안쓰면 사용 할 떄 메모리에 올려 
	-> 실핼할때 메모리에 바로 올림
	-> 프로그램 종료까지 계속 올라가있음.
	-> 남발하면 메모리 낭비.
	-> 자주 사용하는 상수에는 쓰면 메모리면에서 더 좋음.
	-> 클래스 명으로 접근 가능.
	-> 메모리보단 공유의 목적으로 사용.
	
void
	-> return값 있냐 없냐
	-> 안쓰면 자료형 써줘야해, return값 있어야해.
	
private void MethodeName1(){
	요놈 상위 클래스에서만 사용할수 있으며, 리턴값이 없는 함수.
}

int MethodeName2(){
	같은 패키치 내에서 사용할수 있으며, int형 리턴값 주는 함수.
}

public static String(){
	어디서든 사용할수 있으며, 인스턴스 없이 클래스명으로 접근 가능하며, String형 리턴값 주는 함수.
}


전역과 지역 (유효범위)
	this 중요성
	전역 남발하지마라 객체 쪼개서 쓰자 
	파라메터로 받아와야지 전역에 의존하면 전역변수에 종속되어 재활욜하기 어렵다.

생성자
	-> new 
	-> class이름과 동일한 methode 만들면 "생성자" 라고 부른다.
	-> 없으면 자바 내부적으로 만들고, 있으면 우선순위 ㅇㅋ?
	-> 생성자 메소드는 제일 우선순위로 실행된다.
	
상속
	-> class 생성할때 부모class extends 
	-> class c1 extends c2	
		-> c1클래스 만들건데 c2상속받을거야
	-> 코드 중복제거, 근데 부모클래스 바뀌면 자식도 영향받잖어..
	
오버라이딩
	-> 상속받은 메소드 등.. 재정의
	-> 필요없는건 거절한다.
	-> 재정의 = 덮어쓰기 = 오버라이딩 ㅋㅋ