- 클라우드 솔루션
	-> "가상화" 된 서버와 서버에서 작동하는 프로그램과 데이터베이스를 제공하는 IT 환경
	
- AWS (Amazon Web Services)
	-> 아마존닷컴에서 개발한 "클라우드" 컴퓨팅 플랫폼
	-> AWS 에 서버 올리고 프로젝트 진행 하자
	
- 자연어와 기계어
	-> 자연어 : 사람이 작성한 코드.
	-> 기계어 : 2진수로 된 코드 (CPU가 읽음) 
		=> C, JAVA ...
	-> 컴파일 : 자연어를 기계어로 해석 
		=? '컴파일된 바이트 코드를 기계가 이해할 수 있는 기계어로 변환' 자언어를 기계어로 해석하는거 맞아?
		=> 자연어 --> 바이트(바이너리)코드 --> 기계어 순이네 ㅋㅋ 
		출처: https://backendcode.tistory.com/161 [무작정 개발:티스토리]
	-> 링크 : 여러개로 분리된 소스파일들을 컴파일한 결과물들에서 최종 실행가능한 파일을 만들기 위해 필요한 부분을 찾아서 연결해주는 작업
	-> 빌드 : 컴파일된 기계어를 링크하는 작업 추가 여러가지... 빌드에 컴파일, 링크가 포함

- 인터프리터 언어
	-> 컴파일 과정이 필요없는 스크립트 언어 
		=> JS, Python ...

- 언어의 종류
	-> 구조적 프로그래밍 : C ...	
		=? 구조적인 언어는 절차지향 언어에 파생된? 거같은데? 
		=> 동일? 하다고 한다.
		=> 절차지향 : 순차적인 처리 방싱 위주로 짜여진 코드, 객체지향 코드보다 처리속도가 빠름, 디버깅(버그수정)이 어려움, 비유하자면 노트북
	-> 객체지향 프로그래밍 : JAVA ...	
		=> 객체지향 : 객체 위주로 짜여진 코드, 재활용성을 높임, 내입맛대로 재사용 가능, 디버깅(버그수정)이 쉬움, 절차지향보다 처리속도가 느림, 비유하자변 조립식 PC
	-> 스크립트 프로그래밍 : JS, Python ...
	
- 또 OSI 7계층 / TCP,IP 4계층 

- JVM : HW, OS를 소프트웨어로 구현한 것 (가상화, JAVA 전용)
- 클라우드도 HW, OS 환경을 지원하는 거라는데 흠 .... 
	클라우드도 가상머신인데 왜 가상머신 말고 사용하냐 물어봤더니
	가상머신에선 네트워크 사용이 불가능해(개소리) 로컬환경에서만 사용가능하다네
	네트워크 사용 위해 클라우드 사용한다고 합니다요
	
- 아마존 프리티어 
	-> Amazon EC2 : 애플리케이션 배포 (우리가 쓸것)
	-> Amazon S3 : 저장공간
	-> Amazon RDS : DB

- AWS 개인으로 가입 진행. *
	-> 우상단 리전 서울로 변경
	-> 인스턴스 생성
	-> 우분투 AMI-0157 선택
	-> 키페어 생성 (이름 웹서버)
	-> 네트워크 설정 체크박스 3개다 체크
	-> 스토리지 구성 크기 25 설정 
	-> 인스턴스 생성
	-> 인스턴스 보고 우상단 연결 ㄱㄱ
	-> public ip --> 걍 계속 바뀐다 뭐냐 얜 왜 유동ip냐 --> AWS입장에서 고유IP 잡고있는거 자체가 손해기떄문
	
- EC2 > 인스턴스 === 내가 사용할 가상 서버
	-> 퍼블릭 IP4 주소 (개방주소)
	
- AWS, CAFE-24, ...
	-> AWS : 가상 환경 서버
	-> CAFE-24 : 서버 직접 열어주고, 관리
	-> 큰 기업은 자체로 서버 열고 관리한다.
	
- 인스턴스 실행 후 작업 *
	1. ls -al
	2. sudo apt-get update
	3. sudo apt-get upgrade -y
	
- 인스턴스 삭제
	-> 작업 : 중지
	-> 키페어 : 작업 : 삭제
	-> 보안그룹 : launch-wizard-1 : 작업 : 삭제
	
- SSH 
	-> 원격 호스트에접속하기 위해 사용하는 인터넷 프로토콜.
	-> PUTTY 쓸때 썻다.
	
- 탄력적 ip주소 할당 * 
	-> 기존 그대로 할당 ㄱㄱ
	-> 작업 : 탄력적 ip주소 연결
	-> 인스턴스 새로고침 하고 선택 
	-> 프라이빗 ip주소 선택
	
- 보안그룹 * 
	-> 위자드 눌러 
	-> 인바운드 규칙편집
	-> 유형 : 모든icmp - ipv4
	-> 소스 : ipv4 ㄱㄱ (뒤에 0.0.0.0/0 하면 주소는 자동변경된다)
	-> 주소 : 0.0.0.0/0 ㄱㄱ ( 모든ip 주소 허용 )
	-> 인스턴스 가서 재부팅 ㄱㄱ
	-> 이놈 하면 cmd에서 ping 가능
		=> 인바운드 규칙 : 외부에서 내부로 올떄 허가해줄까 말까? 
		=> 아웃바운드 규칙 : 내부에서 내부에서 외부로 갈떄 허가해줄까 말까?
	-> icmp는 개발 환경에서만 열어놓고 배포할땐 닫자
	-> 기본적으로 외부접속해줄라면 포트 열어줘야한다. 
	
- pem, ppk 
	-> pem : 리눅스에서 쓸놈
	-> ppk : 윈도우에서 쓸놈
	-> SSH 연결위해 만든놈
	-> 인바운드 추가한조건에 맞는놈인지 확인하는 키
	-> RSA 방식( 비대칭 암호화 기법 ) 사용
	-> 이놈은 키가 아니다 그냥 기법일뿐 
	
- putty gen * 
	-> putty gen으로 web.pem 변환하네 
		* 근데 걍 아까 putty 사용가능 어쩌구로 받음안됨? 될듯?
	-> load > 우측하단 putty private key > alltype 변경 > 넣어
	-> save private key ㄱㄱ

- putty * 
	-> 탱글주소 저장하고 
	-> Connection => SSH => Auth => 두개항목 
	-> Browse 에 web.ppk 넣자 (요놈도 alltype 해야보임)
	-> 연결 후 ubuntu login
	
-private ip
	-> AWS 자체에 있는 서버와 연동하기위한 ip

- 잡다한
	파이선이 리눅스 기반으로 만든거래 그래서 리눅스 깔떄 파이썬도 깔리더라 ㅇㅋㅇㅋ 
	인스턴스 종료 안하고 중지하면 나중에 돈나간데 ㅇㅋㅇㅋ
	탄력 : 3.39.75.148
	
	요약요약요약
	1. AWS 가입
	2. 인스턴스 생성
	3. 탱글ip 할당.
	4. 보안그룹에 인바운드 추가생성 (SSH) -> 결국 SSH는 푸티같은 외부툴로 접속할라믄 필요한거네
	5. putty gen 으로 pem-->ppk로 바꿔 
	6. putty 설정바꿔
	7. 접속

암호화 방법엔 두가지 방법이 있따 
1. 대칭키 방식 (대칭 암호화, DSA)
	-> 암호, 복호에 한가지 키로만 사용한다.
		-> 예를들면 보안카드란다.
		
2. 공개키 방식 (비대칭 암호화, RSA)

	2-1. 윤제가 공개, 비공개 키 두개 만든다. (윤제공개.key + 윤제비공개.key)
	2-2. 윤제는 만든 (윤제공개.key)를 배포한다. 
	2-3. 철수가 윤제의 (윤제공개.key)를 발급받아 본인의 데이터를 암호화한다. (윤제공개.key + 철수.data = 비밀.data)
	2-4. (비밀.data)가 세상 천지에 뿌려져도 (윤제공개.key)로 암호화 하였기 때문에.. (윤제비공개.key)로만 복호화 할 수 있다.
	2-5. 영희는 철수가만든 암호화 데이터를 복호화 하고싶지만. 그의 짝궁인 (윤제비공개.key)가 없어 복호화를 못한다.

3. pem, ppk 방식 
	pem, ppk는 비밀키라 불린다. (이거떄문에 햇갈렸음. 비밀키가 뭔데?)
	통칭 비밀키라 부르겠따.
	3-1. 비밀키를 발급받는다.
	3-2. 비밀키에는 공개키가 포함되어 있다. (~/.ssh/authorized_keys 파일에 해당 비밀키에 맞는 공개키 정보가 들어가게 된다.)
	3-3. 비밀키로 해당 인스턴스(ip) 에 접속한다. (ip + 비밀키)
	3-4. 인스턴스가 받은 비밀키로 본인을 복호화 할 수 있다면 접속 가능하게 하는거다.
	3-5. 복호화가 안된다면 본인에게 맞는 공용키가 포함된 비밀키가 아님으로, 접속을 막는다.
	3-6. 결국 ppk, pem은 공개키라 보면 될것같다. 비공개키는 인스턴스 본인에게 내장되어 있다고 생각하면 될듯. 
	   이걸 선생님께(타인에게) 넘겨준다 해도, 별 문제 없다. 
	   나는 비밀키가 공개키 + 비공개키 인줄 알았다.