- 다른 패키지 class 사용
	-> 늘 먹던맛
	
- 오버로딩
	-> 같은 메소드 명으로 다른 작업 진행(인자값을 다르게 받아줘야함)
	
- 상속
	-> 인스턴스 생성 할 떄 Animal dog = new Dog();
	-> 동물=부모, 개=자식 
	-> 이런식으로 메소드 생성 가능.
	-> 다중 상속 지원 x
	
- 오버라이딩 
	-> 부모클래스 상속받은 메소드, 변수, 등 재정의
	
- 생성자
	-> 생성자 메소드 = void가 없었네 ㅋㅋㅋ 쓰면 안됨
	-> 생성자 오버로딩도 가능
	
- 인터페이스
	-> interface 키워드로 작성
	-> 단독 파일로 저장하는게 일반적임.
	-> 클래스 선언 이후 implements [인터페이스명] 으로 사용
	-> interface Predator {
			String getFood();
		}
	-> implements 받은 class 들은 getFood() 메소드 정의 해줘야함 아니면 오류 ㅋㅋ
	-> 상속 : 오버라이딩으로 내입맛대로 조리가능
	-> 인터페이스 : 그런건없다 무조건 강제
	-> 디폴트 메서드 : default void printFood() { 식으로 작성, 오버라이딩 가능., 강제성 없음.
	
- 파라메터로 객체 전달.
	-> 05-04 예제 보면
	-> 어찌보면 상속이랑 비슷하네.
	-> 객체 전달해주면 해당 객체가 사용하는 변수...등을 사용 가능한것임.